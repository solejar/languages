//function that declines an adjective
    this.declineAdj = function(){
        //only works if all needed params are chosen
        if(this.validInputs('adj')){
            
            //parse into shorter names just for readability
            var plur = this.currPlurality;
            var gen = this.currGender;//show selected or expected? I guess just selected with class added
            var padex = this.currCase;
            var oldAdj = this.currAdj;
            var length = oldAdj.length;

            //if word is in exceptions, then use that
            if(this.adjExceptions.hasOwnProperty(oldAdj)){
                var endingDict = this.adjExceptions[oldAdj]
            }else{//use the general rules
                
                var adjType = this.getAdjType(oldAdj);
                var endingDict = this.endings['прилагательное'][adjType][gen]
            }

            //need an extra param if it's accusative
            if(padex =='винительный'){
                if(this.currAnimate){
                    var anim = this.currAnimate;
                    var declensionObj = endingDict[padex][anim][plur]
                }else{
                    return ''
                }
            }else{
                var declensionObj = endingDict[padex][plur]
            }
            //apply the ending to the adjective
            var newAdj = this.applyEnding(oldAdj,declensionObj)

            return newAdj;
        }else{
            return '';
        }
    }

//function to decline a noun
    this.declineNoun = function(){
        //wait for all params to be selected
        if(this.validInputs('noun')){

            //pull into these vars for readability
            var oldNoun = this.currNoun;
            var plur = this.currPlurality;
            var gen = this.currGender;
            var padex = this.currCase;
            var length = oldNoun.length;

            //if noun is in exception dict, use those rules
            if(this.exceptions.hasOwnProperty(this.currNoun)){
                var tempdict = this.exceptions[this.currNoun]
                if(tempdict.hasOwnProperty(padex)){
                    var endingDict = tempdict[padex]
                }

            }else{ //use general rules
                var endingDict = this.endings['существительное'][padex]
            }

            //need an extra param if вин.
            if(padex =='винительный'){
                var anim = this.currAnimate;
                var possibleEndings = endingDict[anim][plur][gen]

            }else{
                var possibleEndings = endingDict[plur][gen]
            }

            //use the last letter to determine declension
            var lastLetter = oldNoun.substring(length-1,length);

            var log = []
            var consonants = this.consonants; // need to do this cause 'this' scope doesn't work with foreach
            angular.forEach(possibleEndings,function(value,key){
                //determine ending
                if(key=='all'){
                    var declensionObj = possibleEndings[key];
                    this.push(declensionObj);

                }else if(key=='consonant'){
                    if(consonants.includes(lastLetter)){
                        var declensionObj = possibleEndings['consonant'];
                        this.push(declensionObj);
                    }
                }else{
                    if(key==lastLetter){
                        var declensionObj = possibleEndings[key];
                        this.push(declensionObj);
                    }
                }
            },log);

            //use default ending if needed
            if(!log[0]){
                if(possibleEndings.hasOwnProperty('else')){
                    var declensionObj = possibleEndings['else'];
                }else{
                    return oldNoun; //if no default, just don't decline
                }
                
            }else{
                var declensionObj = log[0] 
            }

            //apply the ending
            var newNoun = this.applyEnding(oldNoun,declensionObj);
            
            return newNoun;
        }else{
            return '';
        }
    }

    this.validInputs = function(PoS){
        if(PoS=='adj'){
            var currPoS = this.currAdj
        }else if(PoS=='noun'){
            var currPoS = this.currNoun
        }

        if(this.currCase){
            if(this.currCase=='винительный'){
                return !!(currPoS&&this.currGender&&this.currAnimate&&this.currPlurality)
            }else{
                return !!(currPoS&&this.currGender&&this.currPlurality)
            }
        }else{
            return false
        }
        
    }