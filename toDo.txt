Decliner:
    Backlog in order: 

    Not worth worrying about card keys anymore, duplicates are okay
    REFACTOR
        Clean up ending controller
            move things into factories as needed
            see if there's a possibility to create multiple controllers
            move to controllers folder

    Turn results of this testing into set of assertions for Jasmine framework testing

    EXCEPTIONS
        some weird adjs don't work, like numerals
        учитель Not the same as as писатель 
        
    Figure out how to integrate Tatoeba

    Unuppercase Single/Plural, Animate/Inanimate, percolate changes throughout app

    Errors:
    -о fix attempted, not tested, -x fix attempted, tested and working

    Really need to change system so that objects are getting passed around, not global scope accessing, this is lazy

    Move declension to a factory, also separate out this ending controller

    Use for each simply to push promise onto array, then use $q.all to wait for all the promises to resolve //for now solution not worth cost

    Login-signup:
        Make sure it requires that password and password confirmation be equal.

        Change validity messages up, enhance them.
        Improve spacing

    Functional:

        Blurring is overwriting gender innappropriately
            Double check this

        Credit the icon artists lol
            <div>Icons made by <a href="https://www.flaticon.com/authors/kiranshastry" title="Kiranshastry">Kiranshastry</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a> is licensed by <a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons BY 3.0" target="_blank">CC 3.0 BY</a></div>

            <div>Icons made by <a href="https://www.flaticon.com/authors/smashicons" title="Smashicons">Smashicons</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a> is licensed by <a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons BY 3.0" target="_blank">CC 3.0 BY</a></div>

        Need to change key to be more than just the declined phrase
            as it needs to be completely unique.

        Perhaps give option to only see most common prepositions
        (In my mind this potentially means moving to an autocomplete model)

        Card:

            Functionality
                Reporting (something wrong with phrase)
                Marking (as difficult?)            

        Edge Cases:
            Flesh out what to do if oper indicated is 'else' (L)
                how do I know/indicate that the ruleSet returned is the default?

            Gender mismatch warning: L
                User submits adj/noun with known, different genders
                <div ng-show="!ending.sameGender(ending.adjGender,ending.nounGender)&&ending.display">
                    {{"Warning! Your adjective has a gender of " + ending.adjGender + " while your noun has a gender of " + ending.nounGender + ". Please change either to make them match."}}
                </div>

            Should I allow user to enter wrong gender mistakenly?
                For example enter male adj and female noun, then just conjugate the male adj into female before starting
                i'm thinking maybe

        Authentication:
            Implement sign-in/log-in page
            implement warnings to trigger if users attempts to save data before logging in (act as prompt for login)
            E-mail notification list?

    Other pages:
        Study - will be the place to review flashcards
            what will this look like?
                What fields needed? To display, or otherwise

            what algorithm for card review?
                1.3<EF<2.5
                1,2,3,4 response.
                Adjust EF accordingly
                Adjust next time interval accordingly
                add 'fuzz' to prevent cards from being same order

            How do we generate tests? 
                review directionality (ru->en, en->ru)?
                duolingo style - generate fake but similar answers
                anki style - only test the card itself (translation?) 
                    probably go with this first as its simpler

        Home
            This will probably link to the other sections
            Maybe some broad overview stats
            Think about what different view will be served to non-authenticated user

        Readings
            Let user upload some text (file upload, copy paste)
                Tokenize input
                paginate (as needed)
                Color-code words based on user's understanding of them
                Provide tool to look up word/phrase
                    See translation
                    if word, example sentences
                    See review info (last time reviewed, last document encountered, how well known)

        Log-in/sign-up:
            Same page or sign-up one page, log-in small widget
            sign-up:
                collect
                    email
                    name
                    level of language
                    show some example words, see if they know them.

    Non-functional: 

        Styling (this is my priority right now)
            Declension Page
                Mobile Size:
                    How should components reorder here to effectively use space real estate? 
                    (try to) remove borders around whiteframe for only mobile view.

                Card
                    make collapsed view more compact
                    expansion should push down, not up

            Footer
                Make footer more compact, come up with nicer spacing


        Code improvement/refactoring:
            Group inputs into a single object, then re-integrate this into rest of app.
            Improve REST endpoints, parse inputs/path urls on start, abstract such logic out of the Mongo
  
        Server-side:
            pipe output to a file or db (figure out what level of logging info to track)
            don't get all exceptions at first, just get exceptions with GET request when needed (Evaluate each decision, see what works best)

        Mongo:
            Look at adding schema validation
            Consider removing 'word ' field from exception
            For specific exceptions, remove animate/inanimate if not needed (maybe this is not worth the trouble, it's a really trivial amount of space)

            Exceptions :
            Consider generalizing a 'stem change' case, let's use remove like 10-15 rule groups, but adds more controller logic (might not be worth it)

        Testing:
            Run each rulegroup on its example for each case, manually verify

            Right up list of component features and run systematic unit tests on them.

        Admin:
            Buy a domain, some online mongo allocation as well

        Design Docs/How-to:
            Hmm this should come before release I suppose?
            How to stuff probably more important  

    Potential ideas:
        word bank!
            Should I move to a model of every word entered going into the database? And then keeping the rules stored? Then we could keep track of frequency and other such things, and provide an asynchronous suggestion bank
        Total sentence constructor, with pronoun and verb placement
            this can either be a different feature from decliner or future extension

        App doesn't handle:

            words with multiple forms of plurals
            Non-declinable, non-russian names.

            Currently deciding if I can handle locative case for words like год

    Singular personal pronouns? Question pronouns? Determinative?
        work on this after the infrastructure is set up    
